# This test contains a route that has multiple TrafficPolicies targeting it.
#
# The expected output must contain the merged policies
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: example-gateway
  namespace: infra
  labels:
    gateway: example
spec:
  gatewayClassName: example-gateway-class
  listeners:
  - name: http
    protocol: HTTP
    port: 80
---
apiVersion: gateway.kgateway.dev/v1alpha1
kind: HTTPListenerPolicy
metadata:
  name: accesslog
  namespace: infra
spec:
  targetSelectors:
  - group: gateway.networking.k8s.io
    kind: Gateway
    matchLabels: 
      gateway: example
  accessLog:
  - grpcService:
      logName: "test-accesslog-service"
      backendRef:
        name: log-test
        port: 50051
    filter:
      headerFilter:
        header:
          value: "test"
          name: "x-my-cool-test-filter"
          type: "Exact"
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: example-route
  namespace: infra
  labels:
    route: example
    global-policy: cors # will be applied only when Settings.GlobalPolicyNamespace=kgateway-system
spec:
  parentRefs:
  - name: example-gateway
  hostnames:
  - "example.com"
  rules:
  - backendRefs:
      - name: example-svc
        port: 80
---
apiVersion: gateway.kgateway.dev/v1alpha1
kind: TrafficPolicy
metadata:
  name: transform
  namespace: infra
spec:
  targetSelectors:
  - group: gateway.networking.k8s.io
    kind: HTTPRoute
    matchLabels: 
      route: example
  transformation:
    response:
      add:
      - name: abc
        value: custom-value-abc
---
apiVersion: gateway.kgateway.dev/v1alpha1
kind: TrafficPolicy
metadata:
  name: rate-limit
  namespace: infra
spec:
  targetSelectors:
  - group: gateway.networking.k8s.io
    kind: HTTPRoute
    matchLabels: 
      route: example
  rateLimit:
    local:
      tokenBucket:
        maxTokens: 99
        tokensPerFill: 1
        fillInterval: 33s
---
apiVersion: v1
kind: Service
metadata:
  name: example-svc
  namespace: infra
spec:
  selector:
    test: test
  ports:
  - protocol: TCP
    port: 80
    targetPort: test
---
apiVersion: v1
kind: Service
metadata:
  name: log-test
  namespace: infra
  labels:
    app: log-test
    service: log-test
spec:
  ports:
  - name: grpc
    port: 50051
    appProtocol: kubernetes.io/h2c
    targetPort: 50051
  selector:
    app: log-test
---
apiVersion: gateway.kgateway.dev/v1alpha1
kind: TrafficPolicy
metadata:
  name: global-policy
  namespace: kgateway-system
spec:
  targetSelectors:
  - group: gateway.networking.k8s.io
    kind: HTTPRoute
    matchLabels: 
      global-policy: cors
  cors:
    allowOrigins:
    - "https://example.com"